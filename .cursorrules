# Cursor Rules for LLM-Assisted Code Repair Project

# Project Structure Rules
project_structure:
  - src/
    - static_analysis/     # Static analysis tools integration
    - dynamic_analysis/    # Dynamic analysis tools integration
    - llm/                # LLM integration and prompts
    - utils/              # Utility functions
  - tests/                # Test cases and validation
  - config/               # Configuration files
  - docs/                 # Documentation

# Code Quality Rules
code_quality:
  - All code must be properly documented with docstrings
  - Follow PEP 8 style guide for Python code
  - Maximum line length: 100 characters
  - Use type hints for function parameters and return values
  - Write unit tests for all new functionality

# Static Analysis Rules
static_analysis:
  - Integrate Infer for static analysis
  - Document all static analysis results
  - Track false positive rates
  - Categorize error types (array bounds, null pointers)

# Dynamic Analysis Rules
dynamic_analysis:
  - Implement test case generation
  - Use symbolic execution for validation
  - Track test coverage metrics
  - Document dynamic analysis results

# LLM Integration Rules
llm_integration:
  - Document all prompts used
  - Version control prompt templates
  - Track LLM response accuracy
  - Implement prompt optimization strategies

# Error Handling Rules
error_handling:
  - Implement comprehensive error logging
  - Handle edge cases gracefully
  - Provide clear error messages
  - Track error patterns and statistics

# Testing Rules
testing:
  - Write unit tests for all components
  - Include integration tests
  - Maintain test coverage above 80%
  - Document test cases and expected results

# Documentation Rules
documentation:
  - Keep documentation up to date
  - Include usage examples
  - Document API changes
  - Maintain changelog

# Security Rules
security:
  - No hardcoded credentials
  - Secure API key handling
  - Input validation
  - Output sanitization

# Performance Rules
performance:
  - Profile code for bottlenecks
  - Optimize resource usage
  - Cache results when appropriate
  - Monitor memory usage

# Version Control Rules
version_control:
  - Use meaningful commit messages
  - Create feature branches
  - Review code before merging
  - Tag releases appropriately 