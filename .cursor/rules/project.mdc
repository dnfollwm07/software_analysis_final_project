---
description: 
globs: 
alwaysApply: false
---
# 项目结构规则
project_structure:
  - src/
    - static_analysis/     # 静态分析工具集成
    - dynamic_analysis/    # 动态分析工具集成
    - llm/                # LLM集成和提示词
    - utils/              # 工具函数
  - examples/             # C++工程示例
  - tests/                # 测试用例和验证
  - config/               # 配置文件
  - docs/                 # 文档

# 任务目标规则
task_goals:
- 实现基于TDD的自动化错误修复流程
- 集成单元测试结果与静态分析结果
- 使用LLM生成符合工程规范的修复补丁
- 支持C++工程迭代的闭环修复验证

# 代码质量规则
code_quality:
  - 所有代码必须正确编写文档字符串
  - Python代码遵循PEP 8风格指南
  - 最大行长度：100个字符
  - 函数参数和返回值使用类型提示
  - 为所有新功能编写单元测试

# 静态分析规则
static_analysis:
  - 集成Infer进行静态分析
  - 记录所有静态分析结果
  - 跟踪误报率
  - 对错误类型进行分类（数组边界、空指针等）

# 动态分析规则
dynamic_analysis:
  - 实现测试用例生成
  - 使用符号执行进行验证
  - 跟踪测试覆盖率指标
  - 记录动态分析结果

# LLM集成规则
llm_integration:
  - 记录所有使用的提示词
  - 对提示词模板进行版本控制
  - 跟踪LLM响应准确性
  - 实现提示词优化策略

# 错误处理规则
error_handling:
  - 实现全面的错误日志记录
  - 优雅处理边缘情况
  - 提供清晰的错误消息
  - 跟踪错误模式和统计信息

# 测试规则
testing:
  - 为所有组件编写单元测试
  - 包含集成测试
  - 保持测试覆盖率在80%以上
  - 记录测试用例和预期结果

# 文档规则
documentation:
  - 保持文档最新
  - 包含使用示例
  - 记录API变更
  - 维护更新日志

# 安全规则
security:
  - 不使用硬编码凭证
  - 安全处理API密钥
  - 输入验证
  - 输出清理

# 性能规则
performance:
  - 分析代码瓶颈
  - 优化资源使用
  - 适当缓存结果
  - 监控内存使用

# 版本控制规则
version_control:
  - 使用有意义的提交信息
  - 创建特性分支
  - 合并前进行代码审查
  - 适当标记发布版本 